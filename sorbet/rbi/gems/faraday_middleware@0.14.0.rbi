# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `faraday_middleware` gem.
# Please instead update this file by running `bin/tapioca gem faraday_middleware`.

# deprecated constants
module Faraday
  class << self
    # source://faraday/0.17.6/lib/faraday.rb#232
    def const_missing(name); end

    # source://faraday/0.17.6/lib/faraday.rb#29
    def default_adapter; end

    # source://faraday/0.17.6/lib/faraday.rb#87
    def default_adapter=(adapter); end

    # source://faraday/0.17.6/lib/faraday.rb#114
    def default_connection; end

    # source://faraday/0.17.6/lib/faraday.rb#35
    def default_connection=(_arg0); end

    # source://faraday/0.17.6/lib/faraday.rb#121
    def default_connection_options; end

    # source://faraday/0.17.6/lib/faraday.rb#126
    def default_connection_options=(options); end

    # source://faraday/0.17.6/lib/faraday.rb#38
    def ignore_env_proxy; end

    # source://faraday/0.17.6/lib/faraday.rb#38
    def ignore_env_proxy=(_arg0); end

    # source://faraday/0.17.6/lib/faraday.rb#25
    def lib_path; end

    # source://faraday/0.17.6/lib/faraday.rb#25
    def lib_path=(_arg0); end

    # source://faraday/0.17.6/lib/faraday.rb#67
    def new(url = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # source://faraday/0.17.6/lib/faraday.rb#77
    def require_lib(*libs); end

    # source://faraday/0.17.6/lib/faraday.rb#77
    def require_libs(*libs); end

    # source://faraday/0.17.6/lib/faraday.rb#94
    def respond_to?(symbol, include_private = T.unsafe(nil)); end

    # source://faraday/0.17.6/lib/faraday.rb#22
    def root_path; end

    # source://faraday/0.17.6/lib/faraday.rb#22
    def root_path=(_arg0); end

    private

    # source://faraday/0.17.6/lib/faraday.rb#101
    def method_missing(name, *args, &block); end
  end
end

class Faraday::Adapter < ::Faraday::Middleware
  extend ::Faraday::Adapter::Parallelism
  extend ::Faraday::AutoloadHelper

  # source://faraday/0.17.6/lib/faraday/adapter.rb#33
  def initialize(app = T.unsafe(nil), opts = T.unsafe(nil), &block); end

  # source://faraday/0.17.6/lib/faraday/adapter.rb#39
  def call(env); end

  private

  # source://faraday/0.17.6/lib/faraday/adapter.rb#45
  def save_response(env, status, body, headers = T.unsafe(nil), reason_phrase = T.unsafe(nil)); end
end

# source://faraday/0.17.6/lib/faraday/adapter.rb#5
Faraday::Adapter::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

class Faraday::Adapter::EMHttp < ::Faraday::Adapter
  include ::Faraday::Adapter::EMHttp::Options

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#88
  def call(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#153
  def create_request(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#157
  def error_message(client); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#175
  def parallel?(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#94
  def perform_request(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#140
  def perform_single_request(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#161
  def raise_error(msg); end

  class << self
    # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#84
    def setup_parallel_manager(options = T.unsafe(nil)); end
  end
end

class Faraday::Adapter::EMHttp::Manager
  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#182
  def initialize; end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#196
  def add(&block); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#227
  def check_finished; end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#221
  def perform_request; end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#186
  def reset; end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#205
  def run; end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#194
  def running?; end
end

module Faraday::Adapter::EMHttp::Options
  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#67
  def configure_compression(options, env); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#33
  def configure_proxy(options, env); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#43
  def configure_socket(options, env); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#52
  def configure_ssl(options, env); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#61
  def configure_timeout(options, env); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#8
  def connection_config(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#28
  def read_body(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#17
  def request_config(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_http.rb#73
  def request_options(env); end
end

class Faraday::Adapter::EMSynchrony < ::Faraday::Adapter
  include ::Faraday::Adapter::EMHttp::Options

  # source://faraday/0.17.6/lib/faraday/adapter/em_synchrony.rb#20
  def call(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_synchrony.rb#91
  def create_request(env); end

  class << self
    # source://faraday/0.17.6/lib/faraday/adapter/em_synchrony.rb#16
    def setup_parallel_manager(options = T.unsafe(nil)); end
  end
end

class Faraday::Adapter::EMSynchrony::ParallelManager
  # source://faraday/0.17.6/lib/faraday/adapter/em_synchrony/parallel_manager.rb#8
  def add(request, method, *args, &block); end

  # source://faraday/0.17.6/lib/faraday/adapter/em_synchrony/parallel_manager.rb#19
  def run; end

  private

  # source://faraday/0.17.6/lib/faraday/adapter/em_synchrony/parallel_manager.rb#43
  def perform; end

  # source://faraday/0.17.6/lib/faraday/adapter/em_synchrony/parallel_manager.rb#38
  def queue; end
end

class Faraday::Adapter::Excon < ::Faraday::Adapter
  # source://faraday/0.17.6/lib/faraday/adapter/excon.rb#6
  def call(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/excon.rb#72
  def create_connection(env, opts); end

  # source://faraday/0.17.6/lib/faraday/adapter/excon.rb#77
  def read_body(env); end
end

class Faraday::Adapter::HTTPClient < ::Faraday::Adapter
  # source://faraday/0.17.6/lib/faraday/adapter/httpclient.rb#10
  def call(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/httpclient.rb#6
  def client; end

  # source://faraday/0.17.6/lib/faraday/adapter/httpclient.rb#100
  def configure_client; end

  # source://faraday/0.17.6/lib/faraday/adapter/httpclient.rb#68
  def configure_proxy(proxy); end

  # source://faraday/0.17.6/lib/faraday/adapter/httpclient.rb#63
  def configure_socket(bind); end

  # source://faraday/0.17.6/lib/faraday/adapter/httpclient.rb#75
  def configure_ssl(ssl); end

  # source://faraday/0.17.6/lib/faraday/adapter/httpclient.rb#87
  def configure_timeouts(req); end

  # source://faraday/0.17.6/lib/faraday/adapter/httpclient.rb#104
  def ssl_cert_store(ssl); end

  # source://faraday/0.17.6/lib/faraday/adapter/httpclient.rb#117
  def ssl_verify_mode(ssl); end
end

class Faraday::Adapter::NetHttp < ::Faraday::Adapter
  # source://faraday/0.17.6/lib/faraday/adapter/net_http.rb#32
  def initialize(app = T.unsafe(nil), opts = T.unsafe(nil), &block); end

  # source://faraday/0.17.6/lib/faraday/adapter/net_http.rb#37
  def call(env); end

  private

  # source://faraday/0.17.6/lib/faraday/adapter/net_http.rb#119
  def configure_request(http, req); end

  # source://faraday/0.17.6/lib/faraday/adapter/net_http.rb#104
  def configure_ssl(http, ssl); end

  # source://faraday/0.17.6/lib/faraday/adapter/net_http.rb#67
  def create_request(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/net_http.rb#96
  def net_http_connection(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/net_http.rb#83
  def perform_request(http, env); end

  # source://faraday/0.17.6/lib/faraday/adapter/net_http.rb#133
  def ssl_cert_store(ssl); end

  # source://faraday/0.17.6/lib/faraday/adapter/net_http.rb#142
  def ssl_verify_mode(ssl); end

  # source://faraday/0.17.6/lib/faraday/adapter/net_http.rb#92
  def with_net_http_connection(env); end
end

# source://faraday/0.17.6/lib/faraday/adapter/net_http.rb#12
Faraday::Adapter::NetHttp::NET_HTTP_EXCEPTIONS = T.let(T.unsafe(nil), Array)

class Faraday::Adapter::NetHttpPersistent < ::Faraday::Adapter::NetHttp
  private

  # source://faraday/0.17.6/lib/faraday/adapter/net_http_persistent.rb#51
  def configure_ssl(http, ssl); end

  # source://faraday/0.17.6/lib/faraday/adapter/net_http_persistent.rb#61
  def http_set(http, attr, value); end

  # source://faraday/0.17.6/lib/faraday/adapter/net_http_persistent.rb#8
  def net_http_connection(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/net_http_persistent.rb#37
  def perform_request(http, env); end

  # source://faraday/0.17.6/lib/faraday/adapter/net_http_persistent.rb#23
  def proxy_uri(env); end
end

module Faraday::Adapter::Parallelism
  # source://faraday/0.17.6/lib/faraday/adapter.rb#24
  def inherited(subclass); end

  # source://faraday/0.17.6/lib/faraday/adapter.rb#21
  def supports_parallel=(_arg0); end

  # source://faraday/0.17.6/lib/faraday/adapter.rb#22
  def supports_parallel?; end
end

class Faraday::Adapter::Patron < ::Faraday::Adapter
  # source://faraday/0.17.6/lib/faraday/adapter/patron.rb#6
  def call(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/patron.rb#69
  def configure_ssl(session, ssl); end

  private

  # source://faraday/0.17.6/lib/faraday/adapter/patron.rb#89
  def connection_timed_out_message?(message); end
end

# source://faraday/0.17.6/lib/faraday/adapter/patron.rb#79
Faraday::Adapter::Patron::CURL_TIMEOUT_MESSAGES = T.let(T.unsafe(nil), Array)

class Faraday::Adapter::Rack < ::Faraday::Adapter
  # source://faraday/0.17.6/lib/faraday/adapter/rack.rb#22
  def initialize(faraday_app, rack_app); end

  # source://faraday/0.17.6/lib/faraday/adapter/rack.rb#28
  def call(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/rack.rb#53
  def execute_request(env, rack_env); end
end

# source://faraday/0.17.6/lib/faraday/adapter/rack.rb#20
Faraday::Adapter::Rack::SPECIAL_HEADERS = T.let(T.unsafe(nil), Array)

class Faraday::Adapter::Test < ::Faraday::Adapter
  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#181
  def initialize(app, stubs = T.unsafe(nil), &block); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#191
  def call(env); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#187
  def configure; end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#40
  def stubs; end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#40
  def stubs=(_arg0); end
end

class Faraday::Adapter::Test::Stub < ::Struct
  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#133
  def initialize(host, full, headers, body, block); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#170
  def headers_match?(request_headers); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#141
  def matches?(request_host, request_uri, request_headers, request_body); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#164
  def params_match?(request_params); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#156
  def path_match?(request_path, meta); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#176
  def to_s; end
end

class Faraday::Adapter::Test::Stubs
  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#46
  def initialize; end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#89
  def delete(path, headers = T.unsafe(nil), &block); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#52
  def empty?; end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#69
  def get(path, headers = T.unsafe(nil), &block); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#73
  def head(path, headers = T.unsafe(nil), &block); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#56
  def match(request_method, host, path, headers, body); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#93
  def options(path, headers = T.unsafe(nil), &block); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#85
  def patch(path, body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#77
  def post(path, body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#81
  def put(path, body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#98
  def verify_stubbed_calls; end

  protected

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#123
  def matches?(stack, host, path, headers, body); end

  # source://faraday/0.17.6/lib/faraday/adapter/test.rb#112
  def new_stub(request_method, path, headers = T.unsafe(nil), body = T.unsafe(nil), &block); end
end

class Faraday::Adapter::Test::Stubs::NotFound < ::StandardError; end

class Faraday::Adapter::Typhoeus < ::Faraday::Adapter
  # source://faraday/0.17.6/lib/faraday/adapter/typhoeus.rb#6
  def call; end
end

module Faraday::AutoloadHelper
  # source://faraday/0.17.6/lib/faraday/autoload.rb#45
  def all_loaded_constants; end

  # source://faraday/0.17.6/lib/faraday/autoload.rb#22
  def autoload_all(prefix, options); end

  # source://faraday/0.17.6/lib/faraday/autoload.rb#35
  def load_autoloaded_constants; end
end

class Faraday::BadRequestError < ::Faraday::ClientError; end
class Faraday::ClientError < ::Faraday::Error; end

class Faraday::CompositeReadIO
  # source://faraday/0.17.6/lib/faraday/upload_io.rb#18
  def initialize(*parts); end

  # source://faraday/0.17.6/lib/faraday/upload_io.rb#51
  def close; end

  # source://faraday/0.17.6/lib/faraday/upload_io.rb#55
  def ensure_open_and_readable; end

  # source://faraday/0.17.6/lib/faraday/upload_io.rb#24
  def length; end

  # source://faraday/0.17.6/lib/faraday/upload_io.rb#34
  def read(length = T.unsafe(nil), outbuf = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/upload_io.rb#28
  def rewind; end

  private

  # source://faraday/0.17.6/lib/faraday/upload_io.rb#65
  def advance_io; end

  # source://faraday/0.17.6/lib/faraday/upload_io.rb#61
  def current_io; end
end

class Faraday::ConflictError < ::Faraday::ClientError; end

class Faraday::Connection
  extend ::Forwardable

  # source://faraday/0.17.6/lib/faraday/connection.rb#60
  def initialize(url = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def adapter(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def app(*args, **_arg1, &block); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#232
  def authorization(type, token); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#193
  def basic_auth(login, pass); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def build(*args, **_arg1, &block); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#409
  def build_exclusive_url(url = T.unsafe(nil), params = T.unsafe(nil), params_encoder = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#393
  def build_request(method); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#353
  def build_url(url = T.unsafe(nil), extra_params = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#28
  def builder; end

  # source://faraday/0.17.6/lib/faraday/connection.rb#242
  def default_parallel_manager; end

  # source://faraday/0.17.6/lib/faraday/connection.rb#40
  def default_parallel_manager=(_arg0); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#137
  def delete(url = T.unsafe(nil), params = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#425
  def dup; end

  # source://faraday/0.17.6/lib/faraday/connection.rb#467
  def find_default_proxy; end

  # source://faraday/0.17.6/lib/faraday/connection.rb#137
  def get(url = T.unsafe(nil), params = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#137
  def head(url = T.unsafe(nil), params = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#21
  def headers; end

  # source://faraday/0.17.6/lib/faraday/connection.rb#100
  def headers=(hash); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def host(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def host=(*args, **_arg1, &block); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#269
  def in_parallel(manager = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#259
  def in_parallel?; end

  # source://faraday/0.17.6/lib/faraday/connection.rb#31
  def options; end

  # source://faraday/0.17.6/lib/faraday/connection.rb#37
  def parallel_manager; end

  # source://faraday/0.17.6/lib/faraday/connection.rb#18
  def params; end

  # source://faraday/0.17.6/lib/faraday/connection.rb#95
  def params=(hash); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#174
  def patch(url = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def path_prefix(*args, **_arg1, &block); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#335
  def path_prefix=(value); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def port(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def port=(*args, **_arg1, &block); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#174
  def post(url = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#282
  def proxy(arg = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#290
  def proxy=(new_value); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#475
  def proxy_for_request(url); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#447
  def proxy_from_env(url); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#174
  def put(url = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil), &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def request(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def response(*args, **_arg1, &block); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#371
  def run_request(method, url, body, headers); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def scheme(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def scheme=(*args, **_arg1, &block); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#441
  def set_authorization_header(header_type, *args); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#34
  def ssl; end

  # source://faraday/0.17.6/lib/faraday/connection.rb#210
  def token_auth(token, options = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#25
  def url_prefix; end

  # source://faraday/0.17.6/lib/faraday/connection.rb#314
  def url_prefix=(url, encoder = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def use(*args, **_arg1, &block); end

  # source://faraday/0.17.6/lib/faraday/connection.rb#435
  def with_uri_credentials(uri); end
end

# source://faraday/0.17.6/lib/faraday/connection.rb#15
Faraday::Connection::METHODS = T.let(T.unsafe(nil), Set)

class Faraday::ConnectionFailed < ::Faraday::ClientError; end

class Faraday::ConnectionOptions < ::Faraday::Options
  # source://faraday/0.17.6/lib/faraday/options.rb#168
  def builder_class; end

  # source://faraday/0.17.6/lib/faraday/options.rb#262
  def new_builder(block); end

  # source://faraday/0.17.6/lib/faraday/options.rb#168
  def request; end

  # source://faraday/0.17.6/lib/faraday/options.rb#168
  def ssl; end
end

module Faraday::Deprecate
  private

  # source://faraday/0.17.6/lib/faraday/deprecate.rb#81
  def deprecate(name, repl, ver); end

  # source://faraday/0.17.6/lib/faraday/deprecate.rb#65
  def skip_during; end

  class << self
    # source://faraday/0.17.6/lib/faraday/deprecate.rb#81
    def deprecate(name, repl, ver); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#50
    def skip; end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#60
    def skip=(value); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#65
    def skip_during; end
  end
end

module Faraday::DeprecatedClass
  class << self
    # source://faraday/0.17.6/lib/faraday/deprecate.rb#10
    def proxy_class(origclass, ver = T.unsafe(nil)); end
  end
end

class Faraday::Env < ::Faraday::Options
  extend ::Forwardable

  # source://faraday/0.17.6/lib/faraday/options.rb#296
  def [](key); end

  # source://faraday/0.17.6/lib/faraday/options.rb#305
  def []=(key, value); end

  # source://faraday/0.17.6/lib/faraday/options.rb#324
  def clear_body; end

  # source://faraday/0.17.6/lib/faraday/options.rb#353
  def custom_members; end

  # source://faraday/0.17.6/lib/faraday/options.rb#359
  def in_member_set?(key); end

  # source://faraday/0.17.6/lib/faraday/options.rb#339
  def inspect; end

  # source://faraday/0.17.6/lib/faraday/options.rb#319
  def needs_body?; end

  # source://faraday/0.17.6/lib/faraday/options.rb#335
  def parallel?; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def params_encoder(*args, **_arg1, &block); end

  # source://faraday/0.17.6/lib/faraday/options.rb#330
  def parse_body?; end

  # source://faraday/0.17.6/lib/faraday/options.rb#314
  def success?; end

  class << self
    # source://faraday/0.17.6/lib/faraday/options.rb#287
    def from(value); end

    # source://faraday/0.17.6/lib/faraday/options.rb#369
    def member_set; end
  end
end

# source://faraday/0.17.6/lib/faraday/options.rb#271
Faraday::Env::ContentLength = T.let(T.unsafe(nil), String)

# source://faraday/0.17.6/lib/faraday/options.rb#277
Faraday::Env::MethodsWithBodies = T.let(T.unsafe(nil), Set)

# source://faraday/0.17.6/lib/faraday/options.rb#272
Faraday::Env::StatusesWithoutBody = T.let(T.unsafe(nil), Set)

# source://faraday/0.17.6/lib/faraday/options.rb#273
Faraday::Env::SuccessfulStatuses = T.let(T.unsafe(nil), Range)

class Faraday::Error < ::StandardError
  # source://faraday/0.17.6/lib/faraday/error.rb#11
  def initialize(exc, response = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/error.rb#17
  def backtrace; end

  # source://faraday/0.17.6/lib/faraday/error.rb#25
  def inspect; end

  # source://faraday/0.17.6/lib/faraday/error.rb#9
  def response; end

  # source://faraday/0.17.6/lib/faraday/error.rb#9
  def wrapped_exception; end

  protected

  # source://faraday/0.17.6/lib/faraday/error.rb#56
  def exc_msg_and_response(exc, response = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/error.rb#46
  def exc_msg_and_response!(exc, response = T.unsafe(nil)); end
end

class Faraday::Error::ClientError < ::Faraday::ClientError
  class << self
    # source://faraday/0.17.6/lib/faraday/deprecate.rb#17
    def ===(other); end

    def _deprecated_new(*_arg0); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
    def inherited(*args, &block); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
    def new(*args, &block); end

    private

    def _deprecated_inherited(_arg0); end
  end
end

# source://faraday/0.17.6/lib/faraday/deprecate.rb#12
Faraday::Error::ClientError::ORIG_CLASS = Faraday::ClientError

class Faraday::Error::ConnectionFailed < ::Faraday::ConnectionFailed
  class << self
    # source://faraday/0.17.6/lib/faraday/deprecate.rb#17
    def ===(other); end

    def _deprecated_new(*_arg0); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
    def inherited(*args, &block); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
    def new(*args, &block); end

    private

    def _deprecated_inherited(_arg0); end
  end
end

# source://faraday/0.17.6/lib/faraday/deprecate.rb#12
Faraday::Error::ConnectionFailed::ORIG_CLASS = Faraday::ConnectionFailed

class Faraday::Error::ParsingError < ::Faraday::ParsingError
  class << self
    # source://faraday/0.17.6/lib/faraday/deprecate.rb#17
    def ===(other); end

    def _deprecated_new(*_arg0); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
    def inherited(*args, &block); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
    def new(*args, &block); end

    private

    def _deprecated_inherited(_arg0); end
  end
end

# source://faraday/0.17.6/lib/faraday/deprecate.rb#12
Faraday::Error::ParsingError::ORIG_CLASS = Faraday::ParsingError

class Faraday::Error::ResourceNotFound < ::Faraday::ResourceNotFound
  class << self
    # source://faraday/0.17.6/lib/faraday/deprecate.rb#17
    def ===(other); end

    def _deprecated_new(*_arg0); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
    def inherited(*args, &block); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
    def new(*args, &block); end

    private

    def _deprecated_inherited(_arg0); end
  end
end

# source://faraday/0.17.6/lib/faraday/deprecate.rb#12
Faraday::Error::ResourceNotFound::ORIG_CLASS = Faraday::ResourceNotFound

class Faraday::Error::RetriableResponse < ::Faraday::RetriableResponse
  class << self
    # source://faraday/0.17.6/lib/faraday/deprecate.rb#17
    def ===(other); end

    def _deprecated_new(*_arg0); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
    def inherited(*args, &block); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
    def new(*args, &block); end

    private

    def _deprecated_inherited(_arg0); end
  end
end

# source://faraday/0.17.6/lib/faraday/deprecate.rb#12
Faraday::Error::RetriableResponse::ORIG_CLASS = Faraday::RetriableResponse

class Faraday::Error::SSLError < ::Faraday::SSLError
  class << self
    # source://faraday/0.17.6/lib/faraday/deprecate.rb#17
    def ===(other); end

    def _deprecated_new(*_arg0); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
    def inherited(*args, &block); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
    def new(*args, &block); end

    private

    def _deprecated_inherited(_arg0); end
  end
end

# source://faraday/0.17.6/lib/faraday/deprecate.rb#12
Faraday::Error::SSLError::ORIG_CLASS = Faraday::SSLError

class Faraday::Error::TimeoutError < ::Faraday::TimeoutError
  class << self
    # source://faraday/0.17.6/lib/faraday/deprecate.rb#17
    def ===(other); end

    def _deprecated_new(*_arg0); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
    def inherited(*args, &block); end

    # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
    def new(*args, &block); end

    private

    def _deprecated_inherited(_arg0); end
  end
end

# source://faraday/0.17.6/lib/faraday/deprecate.rb#12
Faraday::Error::TimeoutError::ORIG_CLASS = Faraday::TimeoutError

module Faraday::FlatParamsEncoder
  class << self
    # source://faraday/0.17.6/lib/faraday/parameters.rb#175
    def decode(query); end

    # source://faraday/0.17.6/lib/faraday/parameters.rb#137
    def encode(params); end

    # source://forwardable/1.3.2/forwardable.rb#229
    def escape(*args, **_arg1, &block); end

    # source://forwardable/1.3.2/forwardable.rb#229
    def unescape(*args, **_arg1, &block); end
  end
end

class Faraday::ForbiddenError < ::Faraday::ClientError; end

class Faraday::Middleware
  extend ::Faraday::MiddlewareRegistry

  # source://faraday/0.17.6/lib/faraday/middleware.rb#33
  def initialize(app = T.unsafe(nil)); end

  class << self
    # source://faraday/0.17.6/lib/faraday/middleware.rb#13
    def dependency(lib = T.unsafe(nil)); end

    # source://faraday/0.17.6/lib/faraday/middleware.rb#28
    def inherited(subclass); end

    # source://faraday/0.17.6/lib/faraday/middleware.rb#6
    def load_error; end

    # source://faraday/0.17.6/lib/faraday/middleware.rb#24
    def loaded?; end

    # source://faraday/0.17.6/lib/faraday/middleware.rb#19
    def new(*_arg0); end

    private

    # source://faraday/0.17.6/lib/faraday/middleware.rb#6
    def load_error=(_arg0); end
  end
end

module Faraday::MiddlewareRegistry
  # source://faraday/0.17.6/lib/faraday.rb#201
  def fetch_middleware(key); end

  # source://faraday/0.17.6/lib/faraday.rb#205
  def load_middleware(key); end

  # source://faraday/0.17.6/lib/faraday.rb#188
  def lookup_middleware(key); end

  # source://faraday/0.17.6/lib/faraday.rb#193
  def middleware_mutex(&block); end

  # source://faraday/0.17.6/lib/faraday.rb#161
  def register_middleware(autoload_path = T.unsafe(nil), mapping = T.unsafe(nil)); end
end

module Faraday::NestedParamsEncoder
  class << self
    # source://faraday/0.17.6/lib/faraday/parameters.rb#67
    def decode(query); end

    # source://faraday/0.17.6/lib/faraday/parameters.rb#118
    def dehash(hash, depth); end

    # source://faraday/0.17.6/lib/faraday/parameters.rb#10
    def encode(params); end

    # source://forwardable/1.3.2/forwardable.rb#229
    def escape(*args, **_arg1, &block); end

    # source://forwardable/1.3.2/forwardable.rb#229
    def unescape(*args, **_arg1, &block); end
  end
end

class Faraday::NilStatusError < ::Faraday::ServerError
  extend ::Faraday::Deprecate

  # source://faraday/0.17.6/lib/faraday/error.rb#111
  def initialize(exc, response = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/deprecate.rb#86
  def unwrap_resp(*args, &block); end

  private

  # source://faraday/0.17.6/lib/faraday/error.rb#121
  def _deprecated_unwrap_resp(resp); end

  # source://faraday/0.17.6/lib/faraday/error.rb#121
  def unwrap_resp!(resp); end
end

class Faraday::Options < ::Struct
  # source://faraday/0.17.6/lib/faraday/options.rb#176
  def [](key); end

  # source://faraday/0.17.6/lib/faraday/options.rb#43
  def clear; end

  # source://faraday/0.17.6/lib/faraday/options.rb#64
  def deep_dup; end

  # source://faraday/0.17.6/lib/faraday/options.rb#36
  def delete(key); end

  # source://faraday/0.17.6/lib/faraday/options.rb#11
  def each; end

  # source://faraday/0.17.6/lib/faraday/options.rb#99
  def each_key; end

  # source://faraday/0.17.6/lib/faraday/options.rb#114
  def each_value; end

  # source://faraday/0.17.6/lib/faraday/options.rb#94
  def empty?; end

  # source://faraday/0.17.6/lib/faraday/options.rb#69
  def fetch(key, *args); end

  # source://faraday/0.17.6/lib/faraday/options.rb#107
  def has_key?(key); end

  # source://faraday/0.17.6/lib/faraday/options.rb#122
  def has_value?(value); end

  # source://faraday/0.17.6/lib/faraday/options.rb#139
  def inspect; end

  # source://faraday/0.17.6/lib/faraday/options.rb#107
  def key?(key); end

  # source://faraday/0.17.6/lib/faraday/options.rb#89
  def keys; end

  # source://faraday/0.17.6/lib/faraday/options.rb#59
  def merge(other); end

  # source://faraday/0.17.6/lib/faraday/options.rb#48
  def merge!(other); end

  # source://faraday/0.17.6/lib/faraday/options.rb#185
  def symbolized_key_set; end

  # source://faraday/0.17.6/lib/faraday/options.rb#129
  def to_hash; end

  # source://faraday/0.17.6/lib/faraday/options.rb#19
  def update(obj); end

  # source://faraday/0.17.6/lib/faraday/options.rb#122
  def value?(value); end

  # source://faraday/0.17.6/lib/faraday/options.rb#84
  def values_at(*keys); end

  class << self
    # source://faraday/0.17.6/lib/faraday/options.rb#161
    def attribute_options; end

    # source://faraday/0.17.6/lib/faraday/options.rb#195
    def fetch_error_class; end

    # source://faraday/0.17.6/lib/faraday/options.rb#6
    def from(value); end

    # source://faraday/0.17.6/lib/faraday/options.rb#189
    def inherited(subclass); end

    # source://faraday/0.17.6/lib/faraday/options.rb#165
    def memoized(key, &block); end

    # source://faraday/0.17.6/lib/faraday/options.rb#172
    def memoized_attributes; end

    # source://faraday/0.17.6/lib/faraday/options.rb#151
    def options(mapping); end

    # source://faraday/0.17.6/lib/faraday/options.rb#156
    def options_for(key); end
  end
end

class Faraday::ParsingError < ::Faraday::ClientError; end

# source://faraday/0.17.6/lib/faraday/upload_io.rb#72
Faraday::Parts = Multipart::Post::Parts

class Faraday::ProxyAuthError < ::Faraday::ClientError; end

class Faraday::ProxyOptions < ::Faraday::Options
  extend ::Forwardable

  # source://forwardable/1.3.2/forwardable.rb#229
  def host(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def host=(*args, **_arg1, &block); end

  # source://faraday/0.17.6/lib/faraday/options.rb#168
  def password; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def path(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def path=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def port(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def port=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def scheme(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def scheme=(*args, **_arg1, &block); end

  # source://faraday/0.17.6/lib/faraday/options.rb#168
  def user; end

  class << self
    # source://faraday/0.17.6/lib/faraday/options.rb#233
    def from(value); end
  end
end

class Faraday::RackBuilder
  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#52
  def initialize(handlers = T.unsafe(nil), &block); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#170
  def ==(other); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#69
  def [](idx); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#100
  def adapter(key, *args, &block); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#153
  def app; end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#63
  def build(options = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#194
  def build_env(connection, request); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#140
  def build_response(connection, request); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#128
  def delete(handler); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#174
  def dup; end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#10
  def handlers; end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#10
  def handlers=(_arg0); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#106
  def insert(index, *args, &block); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#116
  def insert_after(index, *args, &block); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#106
  def insert_before(index, *args, &block); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#74
  def lock!; end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#78
  def locked?; end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#92
  def request(key, *args, &block); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#96
  def response(key, *args, &block); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#121
  def swap(index, *args, &block); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#165
  def to_app(inner_app); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#82
  def use(klass, *args, &block); end

  private

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#212
  def adapter_set?; end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#231
  def assert_index(index); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#216
  def inserting_after_adapter?(index); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#223
  def is_adapter?(handler); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#203
  def raise_if_locked; end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#227
  def use_symbol(mod, key, *args, &block); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#207
  def warn_middleware_after_adapter; end
end

class Faraday::RackBuilder::Handler
  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#26
  def initialize(klass, *args, &block); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#37
  def ==(other); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#47
  def build(app); end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#35
  def inspect; end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#34
  def klass; end

  # source://faraday/0.17.6/lib/faraday/rack_builder.rb#24
  def name; end
end

class Faraday::RackBuilder::StackLocked < ::RuntimeError; end

class Faraday::Request < ::Struct
  extend ::Faraday::MiddlewareRegistry
  extend ::Faraday::AutoloadHelper

  # source://faraday/0.17.6/lib/faraday/request.rb#66
  def [](key); end

  # source://faraday/0.17.6/lib/faraday/request.rb#70
  def []=(key, value); end

  # source://faraday/0.17.6/lib/faraday/request.rb#42
  def headers=(hash); end

  def http_method; end

  # source://faraday/0.17.6/lib/faraday/request.rb#74
  def marshal_dump; end

  # source://faraday/0.17.6/lib/faraday/request.rb#85
  def marshal_load(serialised); end

  # source://faraday/0.17.6/lib/faraday/request.rb#33
  def params=(hash); end

  # source://faraday/0.17.6/lib/faraday/request.rb#110
  def to_env(connection); end

  # source://faraday/0.17.6/lib/faraday/request.rb#50
  def url(path, params = T.unsafe(nil)); end

  class << self
    # source://faraday/0.17.6/lib/faraday/request.rb#26
    def create(request_method); end
  end
end

class Faraday::Request::Authorization < ::Faraday::Middleware
  # source://faraday/0.17.6/lib/faraday/request/authorization.rb#27
  def initialize(app, type, token); end

  # source://faraday/0.17.6/lib/faraday/request/authorization.rb#33
  def call(env); end

  class << self
    # source://faraday/0.17.6/lib/faraday/request/authorization.rb#18
    def build_hash(type, hash); end

    # source://faraday/0.17.6/lib/faraday/request/authorization.rb#6
    def header(type, token); end
  end
end

# source://faraday/0.17.6/lib/faraday/request/authorization.rb#3
Faraday::Request::Authorization::KEY = T.let(T.unsafe(nil), String)

class Faraday::Request::BasicAuthentication < ::Faraday::Request::Authorization
  class << self
    # source://faraday/0.17.6/lib/faraday/request/basic_authentication.rb#6
    def header(login, pass); end
  end
end

class Faraday::Request::Instrumentation < ::Faraday::Middleware
  # source://faraday/0.17.6/lib/faraday/request/instrumentation.rb#25
  def initialize(app, options = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/request/instrumentation.rb#30
  def call(env); end
end

class Faraday::Request::Instrumentation::Options < ::Faraday::Options
  # source://faraday/0.17.6/lib/faraday/request/instrumentation.rb#8
  def instrumenter; end

  # source://faraday/0.17.6/lib/faraday/request/instrumentation.rb#4
  def name; end
end

class Faraday::Request::Multipart < ::Faraday::Request::UrlEncoded
  # source://faraday/0.17.6/lib/faraday/request/multipart.rb#9
  def call(env); end

  # source://faraday/0.17.6/lib/faraday/request/multipart.rb#36
  def create_multipart(env, params); end

  # source://faraday/0.17.6/lib/faraday/request/multipart.rb#26
  def has_multipart?(obj); end

  # source://faraday/0.17.6/lib/faraday/request/multipart.rb#52
  def process_params(params, prefix = T.unsafe(nil), pieces = T.unsafe(nil), &block); end

  # source://faraday/0.17.6/lib/faraday/request/multipart.rb#18
  def process_request?(env); end

  # source://faraday/0.17.6/lib/faraday/request/multipart.rb#48
  def unique_boundary; end
end

# source://faraday/0.17.6/lib/faraday/request/multipart.rb#7
Faraday::Request::Multipart::DEFAULT_BOUNDARY_PREFIX = T.let(T.unsafe(nil), String)

# deprecated alias
#
# source://faraday_middleware//lib/faraday_middleware/request/oauth.rb#87
Faraday::Request::OAuth = FaradayMiddleware::OAuth

# deprecated alias
#
# source://faraday_middleware//lib/faraday_middleware/request/oauth2.rb#85
Faraday::Request::OAuth2 = FaradayMiddleware::OAuth2

class Faraday::Request::Retry < ::Faraday::Middleware
  # source://faraday/0.17.6/lib/faraday/request/retry.rb#111
  def initialize(app, options = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#157
  def build_exception_matcher(exceptions); end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#117
  def calculate_sleep_amount(retries, env); end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#126
  def call(env); end

  private

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#189
  def calculate_retry_after(env); end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#204
  def calculate_retry_interval(retries); end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#175
  def retry_request?(env, exception); end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#179
  def rewind_files(body); end
end

# source://faraday/0.17.6/lib/faraday/request/retry.rb#24
Faraday::Request::Retry::DEFAULT_EXCEPTIONS = T.let(T.unsafe(nil), Array)

# source://faraday/0.17.6/lib/faraday/request/retry.rb#27
Faraday::Request::Retry::IDEMPOTENT_METHODS = T.let(T.unsafe(nil), Array)

class Faraday::Request::Retry::Options < ::Faraday::Options
  # source://faraday/0.17.6/lib/faraday/request/retry.rb#59
  def backoff_factor; end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#63
  def exceptions; end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#47
  def interval; end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#55
  def interval_randomness; end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#43
  def max; end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#51
  def max_interval; end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#67
  def methods; end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#75
  def retry_block; end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#71
  def retry_if; end

  # source://faraday/0.17.6/lib/faraday/request/retry.rb#79
  def retry_statuses; end

  class << self
    # source://faraday/0.17.6/lib/faraday/request/retry.rb#35
    def from(value); end
  end
end

# source://faraday/0.17.6/lib/faraday/request/retry.rb#33
Faraday::Request::Retry::Options::DEFAULT_CHECK = T.let(T.unsafe(nil), Proc)

class Faraday::Request::TokenAuthentication < ::Faraday::Request::Authorization
  # source://faraday/0.17.6/lib/faraday/request/token_authentication.rb#10
  def initialize(app, token, options = T.unsafe(nil)); end

  class << self
    # source://faraday/0.17.6/lib/faraday/request/token_authentication.rb#4
    def header(token, options = T.unsafe(nil)); end
  end
end

class Faraday::Request::UrlEncoded < ::Faraday::Middleware
  # source://faraday/0.17.6/lib/faraday/request/url_encoded.rb#10
  def call(env); end

  # source://faraday/0.17.6/lib/faraday/request/url_encoded.rb#18
  def match_content_type(env); end

  # source://faraday/0.17.6/lib/faraday/request/url_encoded.rb#25
  def process_request?(env); end

  # source://faraday/0.17.6/lib/faraday/request/url_encoded.rb#30
  def request_type(env); end

  class << self
    # source://faraday/0.17.6/lib/faraday/request/url_encoded.rb#6
    def mime_type; end

    # source://faraday/0.17.6/lib/faraday/request/url_encoded.rb#6
    def mime_type=(_arg0); end
  end
end

# source://faraday/0.17.6/lib/faraday/request/url_encoded.rb#3
Faraday::Request::UrlEncoded::CONTENT_TYPE = T.let(T.unsafe(nil), String)

class Faraday::RequestOptions < ::Faraday::Options
  include ::FaradayMiddleware::OptionsExtension

  # source://faraday/0.17.6/lib/faraday/options.rb#207
  def []=(key, value); end
end

class Faraday::ResourceNotFound < ::Faraday::ClientError; end

class Faraday::Response
  extend ::Forwardable
  extend ::Faraday::MiddlewareRegistry
  extend ::Faraday::AutoloadHelper

  # source://faraday/0.17.6/lib/faraday/response.rb#27
  def initialize(env = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def [](*args, **_arg1, &block); end

  # source://faraday/0.17.6/lib/faraday/response.rb#91
  def apply_request(request_env); end

  # source://faraday/0.17.6/lib/faraday/response.rb#49
  def body; end

  # source://faraday/0.17.6/lib/faraday/response.rb#32
  def env; end

  # source://faraday/0.17.6/lib/faraday/response.rb#66
  def finish(env); end

  # source://faraday/0.17.6/lib/faraday/response.rb#53
  def finished?; end

  # source://faraday/0.17.6/lib/faraday/response.rb#44
  def headers; end

  # source://faraday/0.17.6/lib/faraday/response.rb#78
  def marshal_dump; end

  # source://faraday/0.17.6/lib/faraday/response.rb#85
  def marshal_load(env); end

  # source://faraday/0.17.6/lib/faraday/response.rb#57
  def on_complete(&block); end

  # source://faraday/0.17.6/lib/faraday/response.rb#40
  def reason_phrase; end

  # source://faraday/0.17.6/lib/faraday/response.rb#36
  def status; end

  # source://faraday/0.17.6/lib/faraday/response.rb#73
  def success?; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def to_hash(*args, **_arg1, &block); end
end

class Faraday::Response::Logger < ::Faraday::Response::Middleware
  extend ::Forwardable

  # source://faraday/0.17.6/lib/faraday/response/logger.rb#9
  def initialize(app, logger = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/response/logger.rb#22
  def call(env); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def debug(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def error(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def fatal(*args, **_arg1, &block); end

  # source://faraday/0.17.6/lib/faraday/response/logger.rb#35
  def filter(filter_word, filter_replacement); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def info(*args, **_arg1, &block); end

  # source://faraday/0.17.6/lib/faraday/response/logger.rb#29
  def on_complete(env); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def warn(*args, **_arg1, &block); end

  private

  # source://faraday/0.17.6/lib/faraday/response/logger.rb#72
  def apply_filters(output); end

  # source://faraday/0.17.6/lib/faraday/response/logger.rb#45
  def dump_body(body); end

  # source://faraday/0.17.6/lib/faraday/response/logger.rb#41
  def dump_headers(headers); end

  # source://faraday/0.17.6/lib/faraday/response/logger.rb#65
  def log_body?(type); end

  # source://faraday/0.17.6/lib/faraday/response/logger.rb#58
  def log_headers?(type); end

  # source://faraday/0.17.6/lib/faraday/response/logger.rb#53
  def pretty_inspect(body); end
end

# source://faraday/0.17.6/lib/faraday/response/logger.rb#7
Faraday::Response::Logger::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# deprecated alias
#
# source://faraday_middleware//lib/faraday_middleware/response/mashify.rb#37
Faraday::Response::Mashify = FaradayMiddleware::Mashify

class Faraday::Response::Middleware < ::Faraday::Middleware
  # source://faraday/0.17.6/lib/faraday/response.rb#7
  def call(env); end

  # source://faraday/0.17.6/lib/faraday/response.rb#15
  def on_complete(env); end
end

# deprecated alias
#
# source://faraday_middleware//lib/faraday_middleware/response/parse_json.rb#50
Faraday::Response::ParseJson = FaradayMiddleware::ParseJson

# deprecated alias
#
# source://faraday_middleware//lib/faraday_middleware/response/parse_marshal.rb#13
Faraday::Response::ParseMarshal = FaradayMiddleware::ParseMarshal

# deprecated alias
#
# source://faraday_middleware//lib/faraday_middleware/response/parse_xml.rb#15
Faraday::Response::ParseXml = FaradayMiddleware::ParseXml

# deprecated alias
#
# source://faraday_middleware//lib/faraday_middleware/response/parse_yaml.rb#40
Faraday::Response::ParseYaml = FaradayMiddleware::ParseYaml

class Faraday::Response::RaiseError < ::Faraday::Response::Middleware
  # source://faraday/0.17.6/lib/faraday/response/raise_error.rb#5
  def on_complete(env); end

  # source://faraday/0.17.6/lib/faraday/response/raise_error.rb#21
  def response_values(env); end
end

# source://faraday/0.17.6/lib/faraday/response/raise_error.rb#3
Faraday::Response::RaiseError::ClientErrorStatuses = T.let(T.unsafe(nil), Range)

# deprecated alias
#
# source://faraday_middleware//lib/faraday_middleware/response/rashify.rb#15
Faraday::Response::Rashify = FaradayMiddleware::Rashify

class Faraday::RetriableResponse < ::Faraday::ClientError; end
class Faraday::SSLError < ::Faraday::ClientError; end

class Faraday::SSLOptions < ::Faraday::Options
  # source://faraday/0.17.6/lib/faraday/options.rb#224
  def disable?; end

  # source://faraday/0.17.6/lib/faraday/options.rb#220
  def verify?; end
end

class Faraday::ServerError < ::Faraday::Error; end

class Faraday::TimeoutError < ::Faraday::ClientError
  # source://faraday/0.17.6/lib/faraday/error.rb#104
  def initialize(exc = T.unsafe(nil), response = T.unsafe(nil)); end
end

# source://faraday/0.17.6/lib/faraday.rb#133
Faraday::Timer = Timeout

class Faraday::UnauthorizedError < ::Faraday::ClientError; end
class Faraday::UnprocessableEntityError < ::Faraday::ClientError; end

# source://faraday/0.17.6/lib/faraday/upload_io.rb#71
Faraday::UploadIO = Multipart::Post::UploadIO

module Faraday::Utils
  extend ::Faraday::Utils

  # source://faraday/0.17.6/lib/faraday/utils.rb#271
  def URI(url); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#196
  def build_nested_query(params); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#192
  def build_query(params); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#316
  def deep_merge(source, hash); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#304
  def deep_merge!(target, hash); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#221
  def default_params_encoder; end

  # source://faraday/0.17.6/lib/faraday/utils.rb#281
  def default_uri_parser; end

  # source://faraday/0.17.6/lib/faraday/utils.rb#288
  def default_uri_parser=(parser); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#202
  def escape(s); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#230
  def normalize_params(params, name, v = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#297
  def normalize_path(url); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#217
  def parse_nested_query(query); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#213
  def parse_query(query); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#208
  def unescape(s); end

  protected

  # source://faraday/0.17.6/lib/faraday/utils.rb#322
  def sort_query_params(query); end

  class << self
    # source://faraday/0.17.6/lib/faraday/utils.rb#226
    def default_params_encoder=(_arg0); end
  end
end

# source://faraday/0.17.6/lib/faraday/utils.rb#210
Faraday::Utils::DEFAULT_SEP = T.let(T.unsafe(nil), Regexp)

# source://faraday/0.17.6/lib/faraday/utils.rb#200
Faraday::Utils::ESCAPE_RE = T.let(T.unsafe(nil), Regexp)

class Faraday::Utils::Headers < ::Hash
  # source://faraday/0.17.6/lib/faraday/utils.rb#19
  def initialize(hash = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#51
  def [](k); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#56
  def []=(k, v); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#70
  def delete(k); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#64
  def fetch(k, *args, &block); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#78
  def has_key?(k); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#78
  def include?(k); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#25
  def initialize_names; end

  # source://faraday/0.17.6/lib/faraday/utils.rb#78
  def key?(k); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#78
  def member?(k); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#92
  def merge(other); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#86
  def merge!(other); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#106
  def parse(header_string); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#97
  def replace(other); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#104
  def to_hash; end

  # source://faraday/0.17.6/lib/faraday/utils.rb#86
  def update(other); end

  protected

  # source://faraday/0.17.6/lib/faraday/utils.rb#130
  def names; end

  private

  # source://faraday/0.17.6/lib/faraday/utils.rb#30
  def initialize_copy(other); end

  class << self
    # source://faraday/0.17.6/lib/faraday/utils.rb#13
    def allocate; end

    # source://faraday/0.17.6/lib/faraday/utils.rb#9
    def from(value); end
  end
end

# source://faraday/0.17.6/lib/faraday/utils.rb#39
Faraday::Utils::Headers::KeyMap = T.let(T.unsafe(nil), Hash)

class Faraday::Utils::ParamsHash < ::Hash
  # source://faraday/0.17.6/lib/faraday/utils.rb#137
  def [](key); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#141
  def []=(key, value); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#145
  def delete(key); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#149
  def has_key?(key); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#149
  def include?(key); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#149
  def key?(key); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#149
  def member?(key); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#165
  def merge(params); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#157
  def merge!(params); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#174
  def merge_query(query, encoder = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#169
  def replace(other); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#181
  def to_query(encoder = T.unsafe(nil)); end

  # source://faraday/0.17.6/lib/faraday/utils.rb#157
  def update(params); end

  private

  # source://faraday/0.17.6/lib/faraday/utils.rb#187
  def convert_key(key); end
end

# source://faraday/0.17.6/lib/faraday.rb#17
Faraday::VERSION = T.let(T.unsafe(nil), String)

module FaradayMiddleware; end

# Public: Caches GET responses and pulls subsequent ones from the cache.
class FaradayMiddleware::Caching < ::Faraday::Middleware
  extend ::Forwardable

  # Public: initialize the middleware.
  #
  # cache   - An object that responds to read and write (default: nil).
  # options - An options Hash (default: {}):
  #           :ignore_params - String name or Array names of query params
  #                            that should be ignored when forming the cache
  #                            key (default: []).
  #           :write_options - Hash of settings that should be passed as the third
  #                            options parameter to the cache's #write method. If not
  #                            specified, no options parameter will be passed.
  #           :full_key      - Boolean - use full URL (url.host + url.request_uri) as cache key
  #
  # Yields if no cache is given. The block should return a cache object.
  #
  # @return [Caching] a new instance of Caching
  #
  # source://faraday_middleware//lib/faraday_middleware/response/caching.rb#35
  def initialize(app, cache = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def build_query(*args, **_arg1, &block); end

  # Returns the value of attribute cache.
  #
  # source://faraday_middleware//lib/faraday_middleware/response/caching.rb#8
  def cache; end

  # source://faraday_middleware//lib/faraday_middleware/response/caching.rb#61
  def cache_key(env); end

  # source://faraday_middleware//lib/faraday_middleware/response/caching.rb#80
  def cache_on_complete(env); end

  # source://faraday_middleware//lib/faraday_middleware/response/caching.rb#42
  def call(env); end

  # source://faraday_middleware//lib/faraday_middleware/response/caching.rb#103
  def finalize_response(response, env); end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/response/caching.rb#76
  def full_key?; end

  # source://faraday_middleware//lib/faraday_middleware/response/caching.rb#72
  def params_to_ignore; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def parse_query(*args, **_arg1, &block); end

  # source://faraday_middleware//lib/faraday_middleware/response/caching.rb#93
  def store_response_in_cache(key, response); end
end

# Internal: List of status codes that can be cached:
# * 200 - 'OK'
# * 203 - 'Non-Authoritative Information'
# * 300 - 'Multiple Choices'
# * 301 - 'Moved Permanently'
# * 302 - 'Found'
# * 404 - 'Not Found'
# * 410 - 'Gone'
#
# source://faraday_middleware//lib/faraday_middleware/response/caching.rb#17
FaradayMiddleware::Caching::CACHEABLE_STATUS_CODES = T.let(T.unsafe(nil), Array)

# Public: Parse a Transfer-Encoding: Chunked response to just the original data
class FaradayMiddleware::Chunked < ::FaradayMiddleware::ResponseMiddleware
  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/response/chunked.rb#25
  def chunked_encoding?(headers); end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/response/chunked.rb#21
  def parse_response?(env); end
end

# source://faraday_middleware//lib/faraday_middleware/response/chunked.rb#6
FaradayMiddleware::Chunked::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

# Request middleware that encodes the body as JSON.
#
# Processes only requests with matching Content-type or those without a type.
# If a request doesn't have a type but has a body, it sets the Content-type
# to JSON MIME-type.
#
# Doesn't try to encode bodies that already are in string form.
class FaradayMiddleware::EncodeJson < ::Faraday::Middleware
  # source://faraday_middleware//lib/faraday_middleware/request/encode_json.rb#20
  def call(env); end

  # source://faraday_middleware//lib/faraday_middleware/request/encode_json.rb#27
  def encode(data); end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/request/encode_json.rb#43
  def has_body?(env); end

  # source://faraday_middleware//lib/faraday_middleware/request/encode_json.rb#31
  def match_content_type(env); end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/request/encode_json.rb#38
  def process_request?(env); end

  # source://faraday_middleware//lib/faraday_middleware/request/encode_json.rb#47
  def request_type(env); end
end

# source://faraday_middleware//lib/faraday_middleware/request/encode_json.rb#12
FaradayMiddleware::EncodeJson::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://faraday_middleware//lib/faraday_middleware/request/encode_json.rb#13
FaradayMiddleware::EncodeJson::MIME_TYPE = T.let(T.unsafe(nil), String)

# source://faraday_middleware//lib/faraday_middleware/request/encode_json.rb#14
FaradayMiddleware::EncodeJson::MIME_TYPE_REGEX = T.let(T.unsafe(nil), Regexp)

# Public: Follow HTTP 301, 302, 303, 307, and 308 redirects.
#
# For HTTP 301, 302, and 303, the original GET, POST, PUT, DELETE, or PATCH
# request gets converted into a GET. With `:standards_compliant => true`,
# however, the HTTP method after 301/302 remains unchanged. This allows you
# to opt into HTTP/1.1 compliance and act unlike the major web browsers.
#
# This middleware currently only works with synchronous requests; i.e. it
# doesn't support parallelism.
#
# If you wish to persist cookies across redirects, you could use
# the faraday-cookie_jar gem:
#
#   Faraday.new(:url => url) do |faraday|
#     faraday.use FaradayMiddleware::FollowRedirects
#     faraday.use :cookie_jar
#     faraday.adapter Faraday.default_adapter
#   end
class FaradayMiddleware::FollowRedirects < ::Faraday::Middleware
  # Public: Initialize the middleware.
  #
  # options - An options Hash (default: {}):
  #     :limit                      - A Numeric redirect limit (default: 3)
  #     :standards_compliant        - A Boolean indicating whether to respect
  #                                  the HTTP spec when following 301/302
  #                                  (default: false)
  #     :callback                   - A callable that will be called on redirects
  #                                  with the old and new envs
  #     :cookies                    - An Array of Strings (e.g.
  #                                  ['cookie1', 'cookie2']) to choose
  #                                  cookies to be kept, or :all to keep
  #                                  all cookies (default: []).
  #     :clear_authorization_header - A Boolean indicating whether the request
  #                                  Authorization header should be cleared on
  #                                  redirects (default: true)
  #
  # @return [FollowRedirects] a new instance of FollowRedirects
  #
  # source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#66
  def initialize(app, options = T.unsafe(nil)); end

  # source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#74
  def call(env); end

  private

  # source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#132
  def callback; end

  # source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#147
  def clear_authorization_header(env, from_url, to_url); end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#80
  def convert_to_get?(response); end

  # source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#124
  def follow_limit; end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#119
  def follow_redirect?(env, response); end

  # source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#85
  def perform_with_redirection(env, follows); end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#154
  def redirect_to_same_host?(from_url, to_url); end

  # Internal: escapes unsafe characters from an URL which might be a path
  # component only or a fully qualified URI so that it can be joined onto an
  # URI:HTTP using the `+` operator. Doesn't escape "%" characters so to not
  # risk double-escaping.
  #
  # source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#140
  def safe_escape(uri); end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#128
  def standards_compliant?; end

  # source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#100
  def update_env(env, request_body, response); end
end

# HTTP methods for which 30x redirects can be followed
#
# source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#35
FaradayMiddleware::FollowRedirects::ALLOWED_METHODS = T.let(T.unsafe(nil), Set)

# source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#48
FaradayMiddleware::FollowRedirects::AUTH_HEADER = T.let(T.unsafe(nil), String)

# Keys in env hash which will get cleared between requests
#
# source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#39
FaradayMiddleware::FollowRedirects::ENV_TO_CLEAR = T.let(T.unsafe(nil), Set)

# Default value for max redirects followed
#
# source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#42
FaradayMiddleware::FollowRedirects::FOLLOW_LIMIT = T.let(T.unsafe(nil), Integer)

# HTTP redirect status codes that this middleware implements
#
# source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#37
FaradayMiddleware::FollowRedirects::REDIRECT_CODES = T.let(T.unsafe(nil), Set)

# Regex that matches characters that need to be escaped in URLs, sans
# the "%" character which we assume already represents an escaped sequence.
#
# source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#46
FaradayMiddleware::FollowRedirects::URI_UNSAFE = T.let(T.unsafe(nil), Regexp)

# Middleware to automatically decompress response bodies. If the
# "Accept-Encoding" header wasn't set in the request, this sets it to
# "gzip,deflate" and appropriately handles the compressed response from the
# server. This resembles what Ruby 1.9+ does internally in Net::HTTP#get.
#
# This middleware is NOT necessary when these adapters are used:
# - net_http on Ruby 1.9+
# - net_http_persistent on Ruby 2.0+
# - em_http
class FaradayMiddleware::Gzip < ::Faraday::Middleware
  # source://faraday_middleware//lib/faraday_middleware/gzip.rb#85
  def brotli_inflate(body); end

  # source://faraday_middleware//lib/faraday_middleware/gzip.rb#37
  def call(env); end

  # source://faraday_middleware//lib/faraday_middleware/gzip.rb#71
  def inflate(body); end

  # source://faraday_middleware//lib/faraday_middleware/gzip.rb#89
  def raw_body(body); end

  # source://faraday_middleware//lib/faraday_middleware/gzip.rb#55
  def reset_body(env); end

  # source://faraday_middleware//lib/faraday_middleware/gzip.rb#61
  def uncompress_gzip(body); end

  class << self
    # source://faraday_middleware//lib/faraday_middleware/gzip.rb#16
    def optional_dependency(lib = T.unsafe(nil)); end

    # source://faraday_middleware//lib/faraday_middleware/gzip.rb#25
    def supported_encodings; end
  end
end

# source://faraday_middleware//lib/faraday_middleware/gzip.rb#31
FaradayMiddleware::Gzip::ACCEPT_ENCODING = T.let(T.unsafe(nil), String)

# source://faraday_middleware//lib/faraday_middleware/gzip.rb#23
FaradayMiddleware::Gzip::BROTLI_SUPPORTED = T.let(T.unsafe(nil), FalseClass)

# source://faraday_middleware//lib/faraday_middleware/gzip.rb#32
FaradayMiddleware::Gzip::CONTENT_ENCODING = T.let(T.unsafe(nil), String)

# source://faraday_middleware//lib/faraday_middleware/gzip.rb#33
FaradayMiddleware::Gzip::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# source://faraday_middleware//lib/faraday_middleware/gzip.rb#35
FaradayMiddleware::Gzip::RUBY_ENCODING = T.let(T.unsafe(nil), TrueClass)

# source://faraday_middleware//lib/faraday_middleware/gzip.rb#34
FaradayMiddleware::Gzip::SUPPORTED_ENCODINGS = T.let(T.unsafe(nil), String)

# Public: Instruments requests using Active Support.
#
# Measures time spent only for synchronous requests.
#
# Examples
#
#   ActiveSupport::Notifications.subscribe('request.faraday') do |name, starts, ends, _, env|
#     url = env[:url]
#     http_method = env[:method].to_s.upcase
#     duration = ends - starts
#     $stderr.puts '[%s] %s %s (%.3f s)' % [url.host, http_method, url.request_uri, duration]
#   end
class FaradayMiddleware::Instrumentation < ::Faraday::Middleware
  # @return [Instrumentation] a new instance of Instrumentation
  #
  # source://faraday_middleware//lib/faraday_middleware/instrumentation.rb#19
  def initialize(app, options = T.unsafe(nil)); end

  # source://faraday_middleware//lib/faraday_middleware/instrumentation.rb#24
  def call(env); end
end

# Public: Converts parsed response bodies to a Hashie::Mash if they were of
# Hash or Array type.
class FaradayMiddleware::Mashify < ::Faraday::Response::Middleware
  # @return [Mashify] a new instance of Mashify
  #
  # source://faraday_middleware//lib/faraday_middleware/response/mashify.rb#18
  def initialize(app = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute mash_class.
  #
  # source://faraday_middleware//lib/faraday_middleware/response/mashify.rb#7
  def mash_class; end

  # Sets the attribute mash_class
  #
  # @param value the value to set the attribute mash_class to.
  #
  # source://faraday_middleware//lib/faraday_middleware/response/mashify.rb#7
  def mash_class=(_arg0); end

  # source://faraday_middleware//lib/faraday_middleware/response/mashify.rb#23
  def parse(body); end

  class << self
    # Returns the value of attribute mash_class.
    #
    # source://faraday_middleware//lib/faraday_middleware/response/mashify.rb#10
    def mash_class; end

    # Sets the attribute mash_class
    #
    # @param value the value to set the attribute mash_class to.
    #
    # source://faraday_middleware//lib/faraday_middleware/response/mashify.rb#10
    def mash_class=(_arg0); end
  end
end

# Public: Writes the original HTTP method to "X-Http-Method-Override" header
# and sends the request as POST.
#
# This can be used to work around technical issues with making non-POST
# requests, e.g. faulty HTTP client or server router.
#
# This header is recognized in Rack apps by default, courtesy of the
# Rack::MethodOverride module. See
# http://rack.rubyforge.org/doc/classes/Rack/MethodOverride.html
class FaradayMiddleware::MethodOverride < ::Faraday::Middleware
  # Public: Initialize the middleware.
  #
  # app     - the Faraday app to wrap
  # options - (optional)
  #           :rewrite - Array of HTTP methods to rewrite
  #                      (default: all but GET and POST)
  #
  # @return [MethodOverride] a new instance of MethodOverride
  #
  # source://faraday_middleware//lib/faraday_middleware/request/method_override.rb#23
  def initialize(app, options = T.unsafe(nil)); end

  # source://faraday_middleware//lib/faraday_middleware/request/method_override.rb#31
  def call(env); end

  # Internal: Write the original HTTP method to header, change method to POST.
  #
  # source://faraday_middleware//lib/faraday_middleware/request/method_override.rb#46
  def rewrite_request(env, original_method); end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/request/method_override.rb#37
  def rewrite_request?(method); end
end

# source://faraday_middleware//lib/faraday_middleware/request/method_override.rb#15
FaradayMiddleware::MethodOverride::HEADER = T.let(T.unsafe(nil), String)

# Public: Uses the simple_oauth library to sign requests according the
# OAuth protocol.
#
# The options for this middleware are forwarded to SimpleOAuth::Header:
# :consumer_key, :consumer_secret, :token, :token_secret. All these
# parameters are optional.
#
# The signature is added to the "Authorization" HTTP request header. If the
# value for this header already exists, it is not overriden.
#
# If no Content-Type header is specified, this middleware assumes that
# request body parameters should be included while signing the request.
# Otherwise, it only includes them if the Content-Type is
# "application/x-www-form-urlencoded", as per OAuth 1.0.
#
# For better performance while signing requests, this middleware should be
# positioned before UrlEncoded middleware on the stack, but after any other
# body-encoding middleware (such as EncodeJson).
class FaradayMiddleware::OAuth < ::Faraday::Middleware
  extend ::Forwardable

  # @return [OAuth] a new instance of OAuth
  #
  # source://faraday_middleware//lib/faraday_middleware/request/oauth.rb#35
  def initialize(app, options); end

  # source://faraday_middleware//lib/faraday_middleware/request/oauth.rb#64
  def body_params(env); end

  # source://faraday_middleware//lib/faraday_middleware/request/oauth.rb#40
  def call(env); end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/request/oauth.rb#74
  def include_body_params?(env); end

  # source://faraday_middleware//lib/faraday_middleware/request/oauth.rb#45
  def oauth_header(env); end

  # source://faraday_middleware//lib/faraday_middleware/request/oauth.rb#56
  def oauth_options(env); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def parse_nested_query(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/request/oauth.rb#52
  def sign_request?(env); end

  # source://faraday_middleware//lib/faraday_middleware/request/oauth.rb#79
  def signature_params(params); end
end

# Public: A simple middleware that adds an access token to each request.
#
# By default, the token is added as both "access_token" query parameter and the
# "Authorization" HTTP request header. It can alternatively be added exclusively
# as a bearer token "Authorization" header by specifying a "token_type" option
# of "bearer". However, an explicit "access_token" parameter or "Authorization"
# header for the current request are not overriden.
#
# Examples
#
#   # configure default token:
#   OAuth2.new(app, 'abc123')
#
#   # configure query parameter name:
#   OAuth2.new(app, 'abc123', :param_name => 'my_oauth_token')
#
#   # use bearer token authorization header only
#   OAuth2.new(app, 'abc123', :token_type => 'bearer')
#
#   # default token value is optional:
#   OAuth2.new(app, :param_name => 'my_oauth_token')
class FaradayMiddleware::OAuth2 < ::Faraday::Middleware
  extend ::Forwardable

  # @return [OAuth2] a new instance of OAuth2
  #
  # source://faraday_middleware//lib/faraday_middleware/request/oauth2.rb#54
  def initialize(app, token = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def build_query(*args, **_arg1, &block); end

  # source://faraday_middleware//lib/faraday_middleware/request/oauth2.rb#37
  def call(env); end

  # Returns the value of attribute param_name.
  #
  # source://faraday_middleware//lib/faraday_middleware/request/oauth2.rb#32
  def param_name; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def parse_query(*args, **_arg1, &block); end

  # source://faraday_middleware//lib/faraday_middleware/request/oauth2.rb#74
  def query_params(url); end

  # Returns the value of attribute token_type.
  #
  # source://faraday_middleware//lib/faraday_middleware/request/oauth2.rb#32
  def token_type; end
end

# source://faraday_middleware//lib/faraday_middleware/request/oauth2.rb#30
FaradayMiddleware::OAuth2::AUTH_HEADER = T.let(T.unsafe(nil), String)

# source://faraday_middleware//lib/faraday_middleware/request/oauth2.rb#28
FaradayMiddleware::OAuth2::PARAM_NAME = T.let(T.unsafe(nil), String)

# source://faraday_middleware//lib/faraday_middleware/request/oauth2.rb#29
FaradayMiddleware::OAuth2::TOKEN_TYPE = T.let(T.unsafe(nil), String)

# source://faraday_middleware//lib/faraday_middleware/request/oauth.rb#26
FaradayMiddleware::OAuth::AUTH_HEADER = T.let(T.unsafe(nil), String)

# source://faraday_middleware//lib/faraday_middleware/request/oauth.rb#27
FaradayMiddleware::OAuth::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://faraday_middleware//lib/faraday_middleware/request/oauth.rb#28
FaradayMiddleware::OAuth::TYPE_URLENCODED = T.let(T.unsafe(nil), String)

# DRAGONS
module FaradayMiddleware::OptionsExtension
  # @yield [:preserve_raw, preserve_raw]
  #
  # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#90
  def each; end

  # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#96
  def fetch(key, *args); end

  # Returns the value of attribute preserve_raw.
  #
  # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#84
  def preserve_raw; end

  # Sets the attribute preserve_raw
  #
  # @param value the value to set the attribute preserve_raw to.
  #
  # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#84
  def preserve_raw=(_arg0); end

  # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#86
  def to_hash; end
end

# Parse dates from response body
class FaradayMiddleware::ParseDates < ::Faraday::Response::Middleware
  # @return [ParseDates] a new instance of ParseDates
  #
  # source://faraday_middleware//lib/faraday_middleware/response/parse_dates.rb#9
  def initialize(app, options = T.unsafe(nil)); end

  # source://faraday_middleware//lib/faraday_middleware/response/parse_dates.rb#14
  def call(env); end

  private

  # source://faraday_middleware//lib/faraday_middleware/response/parse_dates.rb#22
  def parse_dates!(value); end
end

# source://faraday_middleware//lib/faraday_middleware/response/parse_dates.rb#7
FaradayMiddleware::ParseDates::ISO_DATE_FORMAT = T.let(T.unsafe(nil), Regexp)

# Public: Parse response bodies as JSON.
class FaradayMiddleware::ParseJson < ::FaradayMiddleware::ResponseMiddleware; end

# Public: Override the content-type of the response with "application/json"
# if the response body looks like it might be JSON, i.e. starts with an
# open bracket.
#
# This is to fix responses from certain API providers that insist on serving
# JSON with wrong MIME-types such as "text/javascript".
class FaradayMiddleware::ParseJson::MimeTypeFix < ::FaradayMiddleware::ResponseMiddleware
  # source://faraday_middleware//lib/faraday_middleware/response/parse_json.rb#37
  def first_char(body); end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/response/parse_json.rb#33
  def parse_response?(env); end

  # source://faraday_middleware//lib/faraday_middleware/response/parse_json.rb#23
  def process_response(env); end
end

# source://faraday_middleware//lib/faraday_middleware/response/parse_json.rb#30
FaradayMiddleware::ParseJson::MimeTypeFix::BRACKETS = T.let(T.unsafe(nil), Array)

# source://faraday_middleware//lib/faraday_middleware/response/parse_json.rb#21
FaradayMiddleware::ParseJson::MimeTypeFix::MIME_TYPE = T.let(T.unsafe(nil), String)

# source://faraday_middleware//lib/faraday_middleware/response/parse_json.rb#31
FaradayMiddleware::ParseJson::MimeTypeFix::WHITESPACE = T.let(T.unsafe(nil), Array)

# Public: Restore marshalled Ruby objects in response bodies.
class FaradayMiddleware::ParseMarshal < ::FaradayMiddleware::ResponseMiddleware; end

# Public: parses response bodies with MultiXml.
class FaradayMiddleware::ParseXml < ::FaradayMiddleware::ResponseMiddleware; end

# Public: Parse response bodies as YAML.
#
# Warning: This is not backwards compatible with versions of this middleware prior to
# faraday_middleware v0.12 - prior to this version, we used YAML.load rather than
# YAMl.safe_load, which exposes serious remote code execution risks - see
# https://github.com/ruby/psych/issues/119 for details. If you're sure you can trust
# YAML you're passing, you can set up an unsafe version of this middleware as follows:
#
#     class UnsafelyParseYaml < FaradayMiddleware::ResponseMiddleware
#       dependency do
#         require 'yaml'
#       end
#
#       define_parser do |body|
#         YAML.load body
#       end
#     end
#
#     Faraday.new(..) do |config|
#       config.use UnsafelyParseYaml
#       ...
#     end
class FaradayMiddleware::ParseYaml < ::FaradayMiddleware::ResponseMiddleware; end

# Wraps a handler originally written for Rack to make it compatible with Faraday.
#
# Experimental. Only handles changes in request headers.
class FaradayMiddleware::RackCompatible
  # @return [RackCompatible] a new instance of RackCompatible
  #
  # source://faraday_middleware//lib/faraday_middleware/rack_compatible.rb#8
  def initialize(app, rack_handler, *args); end

  # source://faraday_middleware//lib/faraday_middleware/rack_compatible.rb#19
  def call(env); end

  # source://faraday_middleware//lib/faraday_middleware/rack_compatible.rb#73
  def finalize_response(env, rack_response); end

  # source://faraday_middleware//lib/faraday_middleware/rack_compatible.rb#44
  def headers_to_rack(env); end

  # faraday to rack-compatible
  #
  # source://faraday_middleware//lib/faraday_middleware/rack_compatible.rb#28
  def prepare_env(faraday_env); end

  # rack to faraday-compatible
  #
  # source://faraday_middleware//lib/faraday_middleware/rack_compatible.rb#55
  def restore_env(rack_env); end
end

# source://faraday_middleware//lib/faraday_middleware/rack_compatible.rb#25
FaradayMiddleware::RackCompatible::NonPrefixedHeaders = T.let(T.unsafe(nil), Array)

# Public: Converts parsed response bodies to a Hashie::Rash if they were of
# Hash or Array type.
class FaradayMiddleware::Rashify < ::FaradayMiddleware::Mashify; end

# Public: Exception thrown when the maximum amount of requests is exceeded.
class FaradayMiddleware::RedirectLimitReached < ::Faraday::Error::ClientError
  # @return [RedirectLimitReached] a new instance of RedirectLimitReached
  #
  # source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#9
  def initialize(response); end

  # Returns the value of attribute response.
  #
  # source://faraday_middleware//lib/faraday_middleware/response/follow_redirects.rb#7
  def response; end
end

# Internal: The base class for middleware that parses responses.
class FaradayMiddleware::ResponseMiddleware < ::Faraday::Middleware
  # @return [ResponseMiddleware] a new instance of ResponseMiddleware
  #
  # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#23
  def initialize(app = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#30
  def call(environment); end

  # Parse the response body.
  #
  # Instead of overriding this method, consider using `define_parser`.
  #
  # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#48
  def parse(body); end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#73
  def parse_response?(env); end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#77
  def preserve_raw?(env); end

  # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#38
  def process_response(env); end

  # @return [Boolean]
  #
  # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#67
  def process_response_type?(type); end

  # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#61
  def response_type(env); end

  class << self
    # Store a Proc that receives the body and returns the parsed result.
    #
    # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#13
    def define_parser(parser = T.unsafe(nil), &block); end

    # @private
    #
    # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#17
    def inherited(subclass); end

    # Returns the value of attribute parser.
    #
    # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#9
    def parser; end

    # Sets the attribute parser
    #
    # @param value the value to set the attribute parser to.
    #
    # source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#9
    def parser=(_arg0); end
  end
end

# source://faraday_middleware//lib/faraday_middleware/response_middleware.rb#6
FaradayMiddleware::ResponseMiddleware::CONTENT_TYPE = T.let(T.unsafe(nil), String)
